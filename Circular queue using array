#include<stdio.h>
#include<stdlib.h>

struct queue{
    int size;
    int* arr;
    int f , r;
};
int isfull(struct queue *q){
    if((q->r+1)%q->size == q->f)
        return 1;
    return 0;
}
int isempty(struct queue *q){
    if(q->r == q->f)
        return 1;
    return 0;
}
void enqueue(struct queue* q , int val){
    if(isfull(q))
        printf("queue is full");
    else{
        q->r = (q->r+1)%q->size;
        q->arr[q->r] = val;
        printf("\n%d is inserted in the queue ",q->arr[q->r]);
    }
}
int dequeue(struct queue* q){
    int a = -1;
    if(isempty(q))
        printf("\nqueue is empty");
    else{
        q->f = (q->f+1)%q->size;
        a = q->arr[q->f];
    }
    return a;
}

int main(){
    struct queue q;
    q.size = 10;
    q.f = q.r = 0;
    q.arr = (int*)malloc(q.size * sizeof(int));
    printf("\n  ...........ENQUEUE..........\n");
    enqueue(&q,10);
    enqueue(&q,15);
    enqueue(&q,20);
    enqueue(&q,25);
    enqueue(&q,30);
    enqueue(&q,35);
    printf("\n  ...........DEQUEUE..........\n");
    printf("\n%d is removed from the queue",dequeue(&q));
    printf("\n%d is removed from the queue",dequeue(&q));
    printf("\n%d is removed from the queue",dequeue(&q));
    printf("\n%d is removed from the queue",dequeue(&q));
    printf("\n%d is removed from the queue",dequeue(&q));
    printf("\n%d is removed from the queue",dequeue(&q));
    printf("\n%d is removed from the queue",dequeue(&q));
    enqueue(&q,10);
    enqueue(&q,15);
    isempty(&q);
    return 0;
}
