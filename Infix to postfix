#include <stdio.h>
#include <stdlib.h>
#include<string.h>

struct stack{
    int size;
    int top;
    char *arr;
};
char stacktop(struct stack *sp)
{
    return sp->arr[sp->top];
}
int isfull(struct stack *sp)
{
    if (sp->top == sp->size - 1)
    {
        return 1;
    }
    return 0;
}
int isempty(struct stack *sp)
{
    if (sp->top == -1)
    {
        return 1;
    }
    return 0;
}

struct stack* push(struct stack *sp, char c)
{
    if (isfull(sp))
    {
        printf("\noverflow\n");
    }
    sp->top++;
    sp->arr[sp->top] = c;
    return sp;
}
char pop(struct stack *sp)
{
    if (isempty(sp))
    {
        return -1;
    }
    return sp->arr[sp->top--];
}

int precedence(char c)
{
    if (c == '*' || c == '/')
    {
        return 3;
    }
    else if (c == '+' || c == '-')
    {
        return 2;
    }
    else
    {
        return 0;
    }
}
int isoperator(char c)
{
    if (c == '*' || c == '/' || c == '+' || c == '-')
    {
        return 1;
    }
    return 0;
}

char* infixtopostfix(char *infix)
{
    struct stack *sp = (struct stack*)malloc(sizeof(struct stack));
    sp->size = 10;
    sp->top = -1;
    sp->arr = (char *)malloc(sp->size * sizeof(char));
    char *postfix = (char *)malloc((strlen(infix) + 1) * sizeof(char));
    int i = 0;
    int j = 0;
    while (infix[i] != '\0')
    {
        if (!isoperator(infix[i]))
        {
            postfix[j] = infix[i];
            j++;
            i++;
        }
        else
        {
            if (precedence(infix[i]) > precedence(stacktop(sp)))
            {
                push(sp, infix[i]);
                i++;
            }
            else
            {
                postfix[j] = pop(sp);
                j++;
            }
        }
    }
    while (!isempty(sp))
    {
        postfix[j] = pop(sp);
        j++;
    }
    postfix[j] = '\0';
    return postfix;
}

int main()
{
    char *infix = "x-y/z-k*d";
    printf("The postfix expression is:  %s", infixtopostfix(infix));
    return 0;
}
