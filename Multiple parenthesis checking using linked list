#include <stdio.h>
#include <stdlib.h>

struct stack
{
    char data;
    struct stack *next;
};

isempty(struct stack *sp)
{
    if (sp == NULL)
    {
        return 1;
    }
    return 0;
}
void linktraverse(struct stack *ptr)
{
    while(ptr!=NULL)
    {
        printf("%c\t",ptr->data);
        ptr = ptr->next;
    }  
}

struct stack *push(struct stack *sp, char c)
{
    struct stack *n1 = (struct stack *)malloc(sizeof(struct stack));
    n1->data = c;
    n1->next = sp;
    sp = n1;
    return sp;
}


char pop(struct stack **sp)
{
    if (isempty(*sp))
    {
        printf("underflow");
    }
    else
    {
        struct stack *n1 = *sp;
        *sp = n1->next;
        char val = n1->data;
        //printf("%c",val);
        free(n1);
        return val;
    }
}
int matched(char a, char b)
{
    if (a == '{' && b == '}')
    {
        return 1;
    }
    else if (a == '[' && b == ']')
    {
        return 1;
    }
    else if (a == '(' && b == ')')
    {
        return 1;
    }
    return 0;
}
char parenthesismatching(char *exp)
{
    struct stack *top = NULL;
    char popped_ch = '\0';
    for (int i = 0; exp[i] != '\0'; i++)
    {
        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
        {
            top = push(top, exp[i]);
            linktraverse(top);
            printf("\n");
        }
        else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']')
        {
            if (isempty(top))
            {
                return 0;
            }
            else
            {

                popped_ch = pop(&top);
                if (!matched(popped_ch, exp[i]))
                {
                    return 0;
                }
            }
        }
    }
    if (isempty(top))
    {
        return 1;
    }
}

int main()
{
    char *exp = "[3*2 - {8+1}]";
    parenthesismatching(exp);
    if (parenthesismatching(exp))
    {
        printf("Balanced");
    }
    else
    {
        printf("Unbalanced");
    }
    return 0;
}
