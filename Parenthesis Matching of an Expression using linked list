#include<stdio.h>
#include<stdlib.h>

struct stack{
    char data;
    struct stack * next;

};
isempty(struct stack *sp)
{
    if(sp == NULL)
    {
        return 1;
    }
    return 0;
}

struct stack * push(struct stack * sp , char c)
{
    struct stack * n1 = (struct stack *)malloc(sizeof(struct stack));
    n1->data = c;
    n1->next = sp;
    sp = n1;
    return sp;
}
struct stack * pop(struct stack * sp)
{
    struct stack * n1 = sp;
    sp = sp->next;
    free(n1);
    return sp;
}
char parenthesismatching(struct stack * sp , char * exp)
{
    for(int i = 0 ; exp[i]!='\0' ; i++)
    {
        if(exp[i] == '(')
        {
            sp = push(sp , exp[i]);
        }
        else if(exp[i] == ')')
        {
            if(isempty(sp))
            {
                return 0;
            }
            else
            {
                sp = pop(sp);
            }
        }
    }
    if(isempty(sp))
    {
        return 1;
    }
}

int main()
{
    struct stack * top = NULL;
    char * exp = "(3*2 - (8+1)))";
    parenthesismatching(top , exp);
    if(parenthesismatching(top , exp))
    {
        printf("Balanced");
    }
    else
    {
        printf("Unbalanced");
    }
    return 0;
}
