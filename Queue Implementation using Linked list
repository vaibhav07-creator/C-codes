#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node* next;
};
struct node * f = NULL;
struct node * r = NULL;

void traversal(struct node* ptr){
    printf("\nElements in the linked list are: ");
    while(ptr!=NULL){
        printf("%d\t",ptr->data);
        ptr = ptr->next;
    }
}
int isfull(struct node* ptr){
    if(ptr == NULL)
        return 1;
    return 0;
}
int isempty(struct node* ptr){
    if(ptr == NULL)
        return 1;
    return 0;
}

void enqueue(int data){
    struct node* n = (struct node*)malloc(sizeof(struct node));
    if(isfull(n))
        printf("\n Queue is Full");
    else{
        n->data = data;
        n->next = NULL;
        if(f == NULL){
            f = n;
            r = n;
        }
        else{
            r->next = n;
            r = n;
        }
    }
}
int dequeue(){
    int val = -1;
    struct node* n = (struct node*)malloc(sizeof(struct node));
    if(f == NULL)
        printf("\n Queue is empty");
    else{
        struct node* ptr = f;
        val = f->data;
        f = f->next; 
        free(ptr);
    }
    return val;
}

int main(){
    traversal(f);
    enqueue(10);
    enqueue(20);
    enqueue(30);
    enqueue(40);
    traversal(f);
    printf("\n%d is removed from the queue",dequeue());
    printf("\n%d is removed from the queue",dequeue());
    traversal(f);
    printf("\n%d is removed from the queue",dequeue());
    printf("\n%d is removed from the queue",dequeue());
    printf("\n%d is removed from the queue",dequeue());
    traversal(f);
    return 0;
}
